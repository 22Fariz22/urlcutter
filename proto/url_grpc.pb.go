// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/url.proto

package urlcutter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLCutterService_Post_FullMethodName = "/urlcutter.URLCutterService/Post"
	URLCutterService_Get_FullMethodName  = "/urlcutter.URLCutterService/Get"
)

// URLCutterServiceClient is the client API for URLCutterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLCutterServiceClient interface {
	Post(ctx context.Context, in *LongURL, opts ...grpc.CallOption) (*ShortURL, error)
	Get(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*LongURL, error)
}

type uRLCutterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewURLCutterServiceClient(cc grpc.ClientConnInterface) URLCutterServiceClient {
	return &uRLCutterServiceClient{cc}
}

func (c *uRLCutterServiceClient) Post(ctx context.Context, in *LongURL, opts ...grpc.CallOption) (*ShortURL, error) {
	out := new(ShortURL)
	err := c.cc.Invoke(ctx, URLCutterService_Post_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLCutterServiceClient) Get(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*LongURL, error) {
	out := new(LongURL)
	err := c.cc.Invoke(ctx, URLCutterService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLCutterServiceServer is the server API for URLCutterService service.
// All implementations must embed UnimplementedURLCutterServiceServer
// for forward compatibility
type URLCutterServiceServer interface {
	Post(context.Context, *LongURL) (*ShortURL, error)
	Get(context.Context, *ShortURL) (*LongURL, error)
	mustEmbedUnimplementedURLCutterServiceServer()
}

// UnimplementedURLCutterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedURLCutterServiceServer struct {
}

func (UnimplementedURLCutterServiceServer) Post(context.Context, *LongURL) (*ShortURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedURLCutterServiceServer) Get(context.Context, *ShortURL) (*LongURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedURLCutterServiceServer) mustEmbedUnimplementedURLCutterServiceServer() {}

// UnsafeURLCutterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLCutterServiceServer will
// result in compilation errors.
type UnsafeURLCutterServiceServer interface {
	mustEmbedUnimplementedURLCutterServiceServer()
}

func RegisterURLCutterServiceServer(s grpc.ServiceRegistrar, srv URLCutterServiceServer) {
	s.RegisterService(&URLCutterService_ServiceDesc, srv)
}

func _URLCutterService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLCutterServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLCutterService_Post_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLCutterServiceServer).Post(ctx, req.(*LongURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLCutterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLCutterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLCutterService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLCutterServiceServer).Get(ctx, req.(*ShortURL))
	}
	return interceptor(ctx, in, info, handler)
}

// URLCutterService_ServiceDesc is the grpc.ServiceDesc for URLCutterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLCutterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlcutter.URLCutterService",
	HandlerType: (*URLCutterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _URLCutterService_Post_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _URLCutterService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/url.proto",
}
